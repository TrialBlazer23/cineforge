services:
  backend:
    profiles: [api, ui]
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8001:8000"
    volumes:
      - .:/app
      - ${APPDATA}/gcloud/application_default_credentials.json:/app/application_default_credentials.json:ro
    environment:
      PORT: 8000
      GOOGLE_APPLICATION_CREDENTIALS: /app/application_default_credentials.json
      VERTEX_PROJECT_ID: ${VERTEX_PROJECT_ID}
      VERTEX_LOCATION: ${VERTEX_LOCATION:-us-central1}
    command: >-
      gunicorn --bind :8000 --workers 1 --threads 8 -k uvicorn.workers.UvicornWorker api:app
    depends_on: [redis]
    networks: [mynetwork]

  ui:
    profiles: [ui]
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8501:8501"
    depends_on: [backend]
    volumes:
      - .:/app
      - ${APPDATA}/gcloud/application_default_credentials.json:/app/application_default_credentials.json:ro
    environment:
      PYTHONPATH: /app
      GOOGLE_APPLICATION_CREDENTIALS: /app/application_default_credentials.json
      VERTEX_PROJECT_ID: ${VERTEX_PROJECT_ID}
      VERTEX_LOCATION: ${VERTEX_LOCATION:-us-central1}
      BACKEND_URL: http://backend:8000
    command: >-
      streamlit run ui/app.py --server.port=8501 --server.enableCORS=false --server.enableXsrfProtection=false --browser.gatherUsageStats=false
    networks: [mynetwork]

  redis:
    profiles: [api, ui, queue]
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks: [mynetwork]

  worker:
    profiles: [api, ui, queue]
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - redis
    volumes:
      - .:/app
      - ${APPDATA}/gcloud/application_default_credentials.json:/app/application_default_credentials.json:ro
    environment:
      PYTHONPATH: /app
      GOOGLE_APPLICATION_CREDENTIALS: /app/application_default_credentials.json
      VERTEX_PROJECT_ID: ${VERTEX_PROJECT_ID}
      VERTEX_LOCATION: ${VERTEX_LOCATION:-us-central1}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    command: >-
      celery -A celery_app.celery_app worker --loglevel=INFO --concurrency=2
    networks: [mynetwork]

  flower:
    profiles: [api, ui, queue]
    image: mher/flower:2.0
    # Point Flower at our broker
    environment:
      - FLOWER_BROKER=redis://redis:6379/0
      - FLOWER_URL_PREFIX=
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks: [mynetwork]

networks:
  mynetwork:
    driver: bridge
